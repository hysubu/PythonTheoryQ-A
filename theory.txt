#1 What is decoraterand give examples  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


decorater is a function it take a arguments as an function and adding some functionality or modifying return a oroginal  function without changing any code or behaviour its called decorater 
Example :-

def decora(fun):
    def wrapper():
        d = fun()
        c = d.upper()
        return c
    return wrapper

@decora
def gree():
    return "Subrat Mohanty"
print(gree())

OUTPUT : SUBRAT MOHANTY


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



#Q2. What is Map() Function and Higher Order Function  Give Examples 

Higher Order Function:- 

->  Higher order Function  mean those function want argumenet as an  function or return a function 
 its called Higher order Function 
-> Example: Map() function 

Map:-

-> A Map function whenever we need to apply a paticular function in multiple items  those time we use Map() Function.
-> A map Function return a list or tuple 
-> The Benifit of using  Map function its change or modify every elements of list or tuple without Looping  or list comprehension  

-> Example(1) :- 

lst = ["Subrat", "Sagar", "Rajesh" , "Papu", "Silu"]
l = (list(map(lambda x :x.upper(),lst)))
print(l)
# OutPut : ['SUBRAT', 'SAGAR', 'RAJESH', 'PAPU', 'SILU']

->Example(2) : -
 
def square(n):
     n = n ** 2
     return n 

l = [12,3,4,5,6,7,8,8]
res = list(map(square, l))
print(res)

Output : - [144, 9, 16, 25, 36, 49, 64, 64]


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q3. What is Lambda Function And Give Examples 

-> lamnda function is a anonymous Function 
-> Its define without any name 
-> whenever we created using "lambda" keyword
-> Its take a any number of arguments in one expression or one line 
-> the lambda return a function not values 


squer = lambda x :x**2
print(type(squer))
# <class 'function'>  It return A function 

-> Examples : - 

squer = lambda x :x**2
print(squer(10)) 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q4. What is reduce function give examples 

-> reduce function is a  higher order function 
-> It take argument two one is - function another list or tuple
-> reduce function reduce the list and return a single number 

-> Examples:-
its a return maximum number:- 
 
l = [12, 30, 400, 2, 45, 87]
res = reduce(lambda x,y:x if x>y else y,l)
print(res)
print(type(res))


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q5. What is Filter Function give examples ?

-> its a also higher order function 
-> Its a built in funcion in python 	
-> it take two arguments one is function and another is list or tuple or string
-> the filter function is return a value whenever the condition is true

-> Examples :- 
l = [2,3,4,5,34,45,56,77]
res = list(filter(lambda x : x > 3, l))
print(res)

Output : 120

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q6. What is generator in python ? 

-> generator is aone type of special iterable which allow to  itrate over a sequence(list tuple etc) of values 
   without storing them  all in memory  at once
->generators are define using a function that contain the "yield" keyword 
-> generators is a create a simple iterator 
-> Generator is a function it have no return statement  its have "yield" statement 
-> whenever we call a generator function it gives a geenerator Object  
-> if we want the value of object the we use next() function and get the value one by one 
-> the benifit is useing "yield" statement  its known this element or  item   pass in previous time , 
wehenever we call again this  function its yield statement  execute where its pause 
-> where we use generators 
	-> Representing infinite data or folder 
	-> memory efficient take a less memory a generator 
	-

=> difference is normal and generateor function is 
whenever we call  normal function its permanently  close and removed the memory 
or whenever we call a  generator function its temporarly pause and the known are previous variable or "yield" statement if we call second time a generator function its open or work where its pause 


=> Examples Of generator :- 


def generator():
    yield "first statement"
    yield "second statement"
    yield "Third statement"

gen = generator()
print(next(gen))
print(next(gen))
print(next(gen))
# Output:
# first statement
# second statement
# Third statement
for i in gen :
   print(i)

 Output:
# first statement
# second statement
# Third statement




  














>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q7. What is Iteration ,  Iterator, in python with examples ?

-> Iteration :- 
	
	-> Iteration is a gereral term for taking each item of somting  one after another
	-> like we use anytime loop & while loop also.
	-> The functionalty of loop is also itaration it take item one by one its called iteration.
	-> Examples :
	
	l = [1,23, 4,5,5]
	for i in l :
    	print(i)

	Output: 
	1
	23
	4
	5
	5
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

->Iterator:- 
	-> Iterators is a function that taking a element or item one by one and store it
	-> its store in memory one by one like first one is come add some functionlaty and modify then showing 
	-> it have 2 function 
		-> Iter() : its return a object and creating a iterator 
		-> next() : its retrive or showing iter object  
	-> Iterators wajhse se iterations hota hai
		
	
		-> Examples : 
		a = ["apple", "banana", "orange", "coconut"]
		itr = iter(a)
		print(next(itr))
		print(next(itr))
		print(next(itr))  


	->
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	import sys
Check the iterator how much memory take it : 
	a = range(1,1000000000)
	print(sys.getsizeof(a))
	Output : 48

	l = [x for x in range(1,100)]
	print(sys.getsizeof(l))
	->the list is itarable and  we can make iteration  
	->its not iterator because its cant store one by one in memory 

	output : 920
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.

-> Iterable : -
 
	-> Iterable in a object which can iterate over 
	-> it generate an iteraor whenever we pass iter() method.
	-> all iterator is iterable  because we can use  looping  here 
	-> all iterable is not iterator 

-> How to check which is iterable or not ?
	-> We can use iter() method then print the type and if its iterator then its true if its not then false

	c = [10, 20 ,30, 40]
	itr = iter(c)
	print(type(itr))
	Output : <class 'list_iterator'> Its a iterator
	=>if we can use looping here then its iterators 
	
	a = 10
	itr = iter(a)
	print(type(itr))but its not iterator in python

=> Method = 2

->using Dir() method how to check iterable  or not
->if it have __iter__ method then its  iterator  
-> List, tuple , set, dictinory, string  is a iterable  but int is not 
Example:1 
print(dir(a))  it have not __iter__ method so its not iterable  
# '__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__',
Example2:-

c = [10, 20 ,30, 40] 
it have __iter__ method so its iterable 
print(dir(c))
# '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__',

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

-> How to check a object is iterator or not ?
	-> when we want to check a object iterator or not we can use dir() method 
	-> after using dir() method  if insdie the method or obj have __iter__ or __next__ method so its a 	iterator if its not then its not iterator

	-> Examples : - 
	c = [10, 20, 30, 40]
	itr = iter(c)
	print(dir(itr))
 	Output:- __iter__,__next__ 



  




 	

	  


 


  
   







