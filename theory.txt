#1 What is decoraterand give examples  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


decorater is a function it take a arguments as an function and adding some functionality or modifying return a oroginal  function without changing any code or behaviour its called decorater 
Example :-

def decora(fun):
    def wrapper():
        d = fun()
        c = d.upper()
        return c
    return wrapper

@decora
def gree():
    return "Subrat Mohanty"
print(gree())

OUTPUT : SUBRAT MOHANTY


-> the wrapper function that the actually  modify the behaviour of  fun its call fun() and its store in  d   


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



#Q2. What is Map() Function and Higher Order Function  Give Examples 

Higher Order Function:- 

->  Higher order Function  mean those function want argumenet as an  function or return a function 
 its called Higher order Function 
-> Example: Map() function 

Map:-

-> A Map function whenever we need to apply a paticular function in multiple items  those time we use Map() Function.
-> A map Function return a list or tuple 
-> The Benifit of using  Map function its change or modify every elements of list or tuple without Looping  or list comprehension  

-> Example(1) :- 

lst = ["Subrat", "Sagar", "Rajesh" , "Papu", "Silu"]
l = (list(map(lambda x :x.upper(),lst)))
print(l)
# OutPut : ['SUBRAT', 'SAGAR', 'RAJESH', 'PAPU', 'SILU']

->Example(2) : -
 
def square(n):
     n = n ** 2
     return n 

l = [12,3,4,5,6,7,8,8]
res = list(map(square, l))
print(res)

Output : - [144, 9, 16, 25, 36, 49, 64, 64]


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q3. What is Lambda Function And Give Examples 

-> lamnda function is a anonymous Function 
-> Its define without any name 
-> whenever we created using "lambda" keyword
-> Its take a any number of arguments in one expression or one line 
-> the lambda return a function not values 


squer = lambda x :x**2
print(type(squer))
# <class 'function'>  It return A function 

-> Examples : - 

squer = lambda x :x**2
print(squer(10)) 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q4. What is reduce function give examples 

-> reduce function is a  higher order function 
-> It take argument two one is - function another list or tuple
-> reduce function reduce the list and return a single number 

-> Examples:-
its a return maximum number:- 
 
l = [12, 30, 400, 2, 45, 87]
res = reduce(lambda x,y:x if x>y else y,l)
print(res)
print(type(res))


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q5. What is Filter Function give examples ?

-> its a also higher order function 
-> Its a built in funcion in python 	
-> it take two arguments one is function and another is list or tuple or string
-> the filter function is return a value whenever the condition is true

-> Examples :- 
l = [2,3,4,5,34,45,56,77]
res = list(filter(lambda x : x > 3, l))
print(res)

Output : 120

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q6. What is generator in python ? 

-> generator is aone type of special iterable which allow to  itrate over a sequence(list tuple etc) of values 
   without storing them  all in memory  at once
->generators are define using a function that contain the "yield" keyword 
-> generators is a create a simple iterator 
-> Generator is a function it have no return statement  its have "yield" statement 
-> whenever we call a generator function it gives a geenerator Object  
-> if we want the value of object the we use next() function and get the value one by one 
-> the benifit is useing "yield" statement  its known this element or  item   pass in previous time , 
wehenever we call again this  function its yield statement  execute where its pause 
-> where we use generators 
	-> Representing infinite data or folder 
	-> memory efficient take a less memory a generator 
	-

=> difference is normal and generateor function is 
whenever we call  normal function its permanently  close and removed the memory 
or whenever we call a  generator function its temporarly pause and the known are previous variable or "yield" statement if we call second time a generator function its open or work where its pause 


=> Examples Of generator :- 


def generator():
    yield "first statement"
    yield "second statement"
    yield "Third statement"

gen = generator()
print(next(gen))
print(next(gen))
print(next(gen))
# Output:
# first statement
# second statement
# Third statement
for i in gen :
   print(i)

 Output:
# first statement
# second statement
# Third statement




  














>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q7. What is Iteration ,  Iterator, in python with examples ?

-> Iteration :- 
	
	-> Iteration is a gereral term for taking each item of somting  one after another
	-> like we use anytime loop & while loop also.
	-> The functionalty of loop is also itaration it take item one by one its called iteration.
	-> Examples :
	
	l = [1,23, 4,5,5]
	for i in l :
    	print(i)

	Output: 
	1
	23
	4
	5
	5
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

->Iterator:- 
	-> Iterators is a function that taking a element or item one by one and store it
	-> its store in memory one by one like first one is come add some functionlaty and modify then showing 
	-> it have 2 function 
		-> Iter() : its return a object and creating a iterator 
		-> next() : its retrive or showing iter object  
	-> Iterators wajhse se iterations hota hai
		
	
		-> Examples : 
		a = ["apple", "banana", "orange", "coconut"]
		itr = iter(a)
		print(next(itr))
		print(next(itr))
		print(next(itr))  


	->
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	import sys
Check the iterator how much memory take it : 
	a = range(1,1000000000)
	print(sys.getsizeof(a))
	Output : 48

	l = [x for x in range(1,100)]
	print(sys.getsizeof(l))
	->the list is itarable and  we can make iteration  
	->its not iterator because its cant store one by one in memory 

	output : 920
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.

-> Iterable : -
 
	-> Iterable in a object which can iterate over 
	-> it generate an iteraor whenever we pass iter() method.
	-> all iterator is iterable  because we can use  looping  here 
	-> all iterable is not iterator 

-> How to check which is iterable or not ?
	-> We can use iter() method then print the type and if its iterator then its true if its not then false

	c = [10, 20 ,30, 40]
	itr = iter(c)
	print(type(itr))
	Output : <class 'list_iterator'> Its a iterator
	=>if we can use looping here then its iterators 
	
	a = 10
	itr = iter(a)
	print(type(itr))but its not iterator in python

=> Method = 2

->using Dir() method how to check iterable  or not
->if it have __iter__ method then its  iterator  
-> List, tuple , set, dictinory, string  is a iterable  but int is not 
Example:1 
print(dir(a))  it have not __iter__ method so its not iterable  
# '__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__',
Example2:-

c = [10, 20 ,30, 40] 
it have __iter__ method so its iterable 
print(dir(c))
# '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__',

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

-> How to check a object is iterator or not ?
	-> when we want to check a object iterator or not we can use dir() method 
	-> after using dir() method  if insdie the method or obj have __iter__ or __next__ method so its a 	iterator if its not then its not iterator

	-> Examples : - 
	c = [10, 20, 30, 40]
	itr = iter(c)
	print(dir(itr))
 	Output:- __iter__,__next__ 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Q8.What is Python ? 

-> Python is a general Porpose language and simple language
-> We can use this language devlop different type of software 
-> Its a object oriented interpreted programming Language 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 #Q9. Difference between List and tuple  ?

LIST 						TUPLE 
-----------------------------------------------------
-> List is collection of differentes types	-> Tuple is a collection of differents type of value
 of value 

-> List is a mutable it mean we can modifying  -> Tuple is a immutable data type we cant modifyng 

-> List uses Squere "[ ]" bracket 		-> Tuple uses Parentesis "( )"

->List consume More memory 			-> Tuple consume less memory 

-> List have many function			-> Tuple have  less function like : count ,index
like: extend , append , insert , remove
update etc 
-> Example : 					-> Example :

-> import sys 					-> import sys

li =  [12,34,44,44,44,33]				tup = (12,34,44,44,44,33)
print(sys.getsizeof(li))				print(sys.getsizeof(tup))
Output :  152						-> Output :- 88 
			

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q10. What is difference between Local Variable and Global Variable ? 

-> Local Variable 
	-> Local mean when we define a variable inside the functon its called Local Variable.
	-> Local variable acces only those function which funtions inside declare 
	-> Example :  
		-> def function():
			variable = "local variable"
			print(variable)
		   function()
				
-> Global Variable: -
	-> Global Variable mean which variable declare outside of function or scope its called Global Variable 
	-> The Global variable acces any function in the programme
	-> Example : 
		-> variable = "Global variable"
		-> def function()
			print(variable)
		  function()
		

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q11.What is difference Between Deep and Shallow Copy ? 

-> Deep Copy:-
	-> In deep copy any changes made to a copy of object do not reflect in the Original object 
	-> The original and copy id will be difference here 
	-> the Adharcard xerox is black and white but origina is original  	

-> Shallow Copy: - 
	-> In case of shallow copy a reference of object 
	-> It mean that any changes made to a copy it reflect o original object 

Example Of Both: 

import copy

# Original list with nested objects
original_list = [1, 2, [3, 4]]

# Shallow copy
shallow_copy = original_list.copy()

# Deep copy
deep_copy = copy.deepcopy(original_list)

# Modify the nested list in original_list
original_list[2][0] = 5

print(original_list)    # [1, 2, [5, 4]]
print(shallow_copy)     # [1, 2, [5, 4]]
print(deep_copy)        # [1, 2, [3, 4]]

		 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q12. What is Help() Function ? 

-> Its a Built-in Python function 
-> The help() function is a powerful tool for accessing documentation and understanding Python objects.
-> If we need or want about any module or class that time we use help() function 

-> Examples :- 
	-> import copy   --- its a function 
	-> print(help(copy))
	-> Output :
	Help on module copy:

	NAME
    		copy - Generic (shallow and deep) copying operations.

	MODULE REFERENCE
    		https://docs.python.org/3.10/library/copy.html
    
    	The following documentation is automatically generated from the Python


 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q13. What is dir() Function ? 

-> Its abuilt-in Function in python 
-> The dir() function return all propoties and method of the specific object without values 
-> It return all  dunder or magicmethod or methods related this module or function or object 
-> Example:- 
	import math 
	-> print(dir(math))
return this function
	['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 
	'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 
	'lcm', 'ldexp', 'lgamma','log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau',
	 'trunc', 'ulp']


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q14. What is difference between Stattically and Dynamically ? 


-> Statically : - 

	-> In statically typed languages, variables are bound to a specific type
 	during compilation and their types are checked at compile-time.
	-> Example : int x = 5;
		int y = "Hello"; 


-> Dynamically : 
	-> In dynamically typed languages, variables are not bound to a specific type during compilation.
	 The type of a variable is determined at runtime based on the assigned value.

	-> Type checking is performed during runtime, allowing variables to hold values
	 of different types at different points in the program.
	-> Examples : x = 5
		     y = "Hello"  # No type declaration or checking



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q15. What is recursion  ? 
	
	-> recursion Is a programming Technique  where a function call itself 
 
	-> Example:- 

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)
print(factorial(4))



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q16. What is Pickling and  Unpickling In python ?

-> Pickling mean (serializer)  its convert the source or python data into byte stream typand save the file
-> Flow : 
	
	"Pythondata:-------------------------" convert byte stream(dumpsmethod)"----------------file(dave)-- 

-> Example : 	import pickle
	data = {
    	'name': 'John',
    	'age': 30,
    	'city': 'New York'
	}
-> Unpickling 

-> Unpickling mean (deserializer) its convert the byte stream to Python source code  

-> flow :
	
	file(data)--------------------- convert python code(loadmethod)------------------------"python data 
-> Examples: 

	-> with open('data.pickle', 'rb') as file:
    	loaded_data = pickle.load(file) 
	output : {'name': 'John', 'age': 30, 'city': 'New York'}



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q17.What is Slicing ? 

-> a slicing is a techniqu it return a range of character 
-> a slicing start with statrt position index
-> by default its staart also starting index 
-> it take a 3 arguments 
	-> start , end , step 
	-> start : shere we start 
	-> end : which index levels we show 
	-> step : its  gap between  character 
-> Example : 
	variable[start: end: step] 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q18. How to create File in a Python Source Code ? 

-> f = open("create.py", "x")
	print(f)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q19. How to remove or Delete python file in source code ? 

-> import  os
	rem = os.remove("create.py")
	print(rem)



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q20. What is Set in python ?  

	-> Set  is  onod=rder collection or unique items 
	-> set is defines by value separeted by commas 
	-> its use is flower bracket "{ }" 
	-> how to create empty set    =>  set()
	-> example: {1,2,3,4,5,6}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q21. What is dictinory in python ? 

-> Python dectinory is a ordered collection of items 

-> it store elements key,value pair
 
-> here key is alway unique identifier

-> its a mutable only value  we can change or midify  the value 

-> Examples : {"key":"value" , "key2":"value"}
 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
					OOPS 

#Q22. What is instance Variable ? 

-> in python oops when we declare a variable/ value  inside a constructor of class (__init__) 

-> this variable is different for differnt objects 

-> Examples : 
	-> class Employee:
		def __init__(self, id, name)
			self.name = name 
			self.id = id    ---- Its a instance Variable 
	obj = Employee(1, "subu")

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q23. What is class variable ? 

-> Its declare alwaye outsude the all  class-function and inside the class 
-> its declare below the class header 
-> Class variables are accessed using the class name or any instance of the class.
-> This variable / value is equal  for every object or instance  
-> if  hthe value of class variable is modify it reflect for all instance 
-> We can updete or modify using only class name 

-> Example : class Car:
    color = 'red'  # Class variable

	car1 = Car()	
	car2 = Car()

print(car1.color)  # Output: red
print(car2.color)  # Output: red

Car.color = 'blue'  # Modifying class variable

print(car1.color)  # Output: blue
print(car2.color)  # Output: blue


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#Q24. What is difference between  function and method ? 

Function						Method 

-> Functions are blocks of code that perform a		-> Methods are functions that are defined within a class
 specific task and can be called from anywhere		and operate on instances of that class (or the class itself).
 in the program.

-> They are defined outside of classes and can be   	-> They are associated with a specific object or 
standalone or part of a module.				class and can access and modify instance or class variables.

->Functions can have parameters (inputs) and 		-> Methods are called using the object or class instance 
return values (outputs).				followed by the method name and parentheses.

-> Functions are typically called using the function
 name followed by parentheses.


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Q25. Difference between Abstraction  and Encapsulation ? 


----------------------------------------------------------------------------------------------------------------------------------------
	Abstraction 						Encapsulation 
----------------------------------------------------------------------------------------------------------------------------------------
-> Abstraction solves the problem in the design level       	 -> Encapsulation solve the problem in the implementation level 


-> Abstraction is used for hidding the unwanted data 		 -> Encapsulation means hiding the code and data into a single unit 
giving relevent data 						to protect the data from outside world 

-> Abstarction lets you focus on what the object does 		-> Encapsulation meansa hiding the internal details or mechanics of how an 
insted of how it does it.(ଅବଷ୍ଟାର୍କେସନ୍ ଆପଣଙ୍କୁ ବସ୍ତୁ କିପରି କରେ				object does somthing(ଏନକାପସୁଲେସନ୍ ଅର୍ଥ ହେଉଛି ଏକ ବସ୍ତୁ କିପରି କିଛି କରେ ତାହାର ଆଭ୍ୟନ୍ତରୀଣ ବିବରଣୀ କିମ୍ବା ଯାନ୍ତ୍ରିକତାକୁ ଲୁଚାଇଥାଏ) 									 
ତାହା ଉପରେ ଧ୍ୟାନ ଦେବାକୁ ଦିଏ )				


-> Abstraction :- Outer layout used in terms of design 		-> inner layout used in terms of implementation

-> Examples :							-> Example : 
Outer look of mobile phone like it has a display			inner implementation detail of a mobile phone , how keyword button and display screen are  
screen and keypad buttons to dial a number 				connect with each other using circuits 



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.


Q26. What Method Overloading ? 

	-> Method Overloading is a consept in object -oriented-programming  where a class  can have 
	muliple methods with same name but different parameter lists 
	-> Python has not sopperted Method overloading 
	-> but we can using defauly keyword parameter to create Overloading or using also conditions 


-> Exmaples :


class Calculator:
    def add(self, a, b=0):
        return a + b

    def multiply(self, a, b=1):
        return a * b

calc = Calculator()
print(calc.add(5))       # Output: 5
print(calc.add(5, 3))    # Output: 8

print(calc.multiply(5))  # Output: 5
print(calc.multiply(5, 3))  # Output: 15


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 	
 Q27. What is Method Overriding ? 


 Method overriding is a fundamental concept in object-oriented programming, where a subclass provides a specific implementation
 for a method that is already defined in its superclass. The overridden method in the subclass has the same name,
 return type, and parameters as the method in the superclass.
	  

-> Examples : 
class Animal:
    def speak(self):
        return "Animal speaks"

class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"

# Instantiate objects
animal = Animal()
dog = Dog()
cat = Cat()

# Method calls
print(animal.speak())  # Output: Animal speaks
print(dog.speak())     # Output: Woof!
print(cat.speak())     # Output: Meow!




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


 


  
   







